1. 재귀적으로 둘 이상의 하위 문제로 나누고, 하위 문제를 해결한 다음 그것을 합치어 전체 문제를 해결

2. 진행방식
  (1) 분할
  (2) 정복
  (3) 병합

3. 동적 프로그래밍과 차이
  (1) 공통점
    (가) 하위 문제로 쪼개어서 문제를 해결함
  (2) 차이점
    ☆ 
    (가) 가장 큰 차이점은 dp는 메모리제이션을 사용하고, 분할정복은 메모리제이션은 사용하지 않는 것 --> 큰 범주에서 보면 분할정복에서 메모리제이션을 사용하는 것이 dp인 느낌!
    분할정복 < dp
    ☆
    (나) dp는 하위 문제에 중복이 일어나고, 분할정복은 중복이 일어나지 않는 경우에 사용
    (다) dp는 bottom-up도 가능, 분할정복은 top-down만 가능

4. 예시
  (1) 퀵 정렬 : 기준 원소(pivot) 정해서 좌우 분할 --> 왼쪽 오른쪽 리스트 재귀적으로 반환
    (가) 참조       https://velog.io/@hyejiseo-dev/Python-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B6%84%ED%95%A0%EC%A0%95%EB%B3%B5-%ED%80%B5%EC%A0%95%EB%A0%AC
    
  (2) 합병 정렬 : 해당 문제 2개로 분할, 부분 문제의 크기가 1/2로 감소 --> 이후 하위 문제들 합병
    (가) 퀵 정렬과 차이
      (ㄱ) 퀵 정렬은 기준 원소(pivot)에 의해 분할, 합병 정렬은 1/2크기로 하위 문제를 분할
